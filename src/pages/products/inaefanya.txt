import React, { FC, useState, useRef, useEffect } from 'react';
import { Container, Row, Col, Table, Button, Form, Modal, Pagination, Spinner } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import Select from 'react-select';
import '../../renderer/getStarted.css';
import { Header } from '../Layouts/nav';
import { ToastContainer, toast } from 'react-toastify';
import Swal from 'sweetalert2';
import { Sidebar } from '../Layouts/sidebar';
import "./product.css";
import * as XLSX from 'xlsx';
import productApi from '../api/productApi'; // Import the provided API

interface Product {
  id: number | null;
  name: string;
  description: string;
  price: number;
  quantity: number;
  tax: string;
  unit: string;
  county: string;
  itemType: string;
  packagingUnit: string;
  quantityUnit: string;
  paymentType: string;
  itemCode: string;
}

const AllProduct: FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [searchParams, setSearchParams] = useState<{ name: string; itemCode: string }>({ name: '', itemCode: '' });
  const [showModal, setShowModal] = useState<boolean>(false);
  const [productToEdit, setProductToEdit] = useState<Product>({
    id: null,
    name: '',
    description: '',
    price: 0,
    quantity: 0,
    tax: '',
    unit: '',
    county: '',
    itemType: '',
    packagingUnit: '',
    quantityUnit: '',
    paymentType: '',
    itemCode: ''
  });
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    fetchProducts();
  }, []);

  // Fetch all products
  const fetchProducts = async () => {
    try {
      setLoading(true);
      const response = await productApi.get('/');
      setProducts(response.data);
      setFilteredProducts(response.data);
    } catch (error) {
      console.error('Error fetching products:', error);
      toast.error('Error fetching products.');
    } finally {
      setLoading(false);
    }
  };

  // Add or update a product
  const handleSave = async () => {
    try {
      if (productToEdit.id === null) {
        // Add new product
        await productApi.post('/', productToEdit);
        toast.success('Product added successfully!');
      } else {
        // Update existing product
        await productApi.put(`/${productToEdit.id}`, productToEdit);
        toast.success('Product updated successfully!');
      }
      fetchProducts(); // Refresh the product list
      setShowModal(false); // Close the modal
    } catch (error) {
      console.error('Error saving product:', error);
      toast.error('Error saving product.');
    }
  };

  // Delete a product
  const handleDelete = async (id: number) => {
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: 'This action cannot be undone.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    });

    if (result.isConfirmed) {
      try {
        await productApi.delete(`/${id}`);
        toast.success('Product deleted successfully!');
        fetchProducts(); // Refresh the product list
      } catch (error) {
        console.error('Error deleting product:', error);
        toast.error('Error deleting product.');
      }
    }
  };

  // Handle file import
  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      const data = e.target?.result;
      if (data) {
        const workbook = XLSX.read(data, { type: 'binary' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const importedData = XLSX.utils.sheet_to_json(worksheet);

        try {
          await productApi.post('/import', { products: importedData });
          toast.success('Products imported successfully!');
          fetchProducts(); // Refresh the product list
        } catch (error) {
          console.error('Error importing products:', error);
          toast.error('Error importing products.');
        }
      }
    };
    reader.readAsBinaryString(file);
  };

  // Handle download template
  const handleDownloadTemplate = () => {
    const sampleData = [
      ['Name', 'Description', 'Price', 'Quantity', 'Tax', 'Unit', 'County', 'ItemType', 'PackagingUnit', 'QuantityUnit', 'PaymentType', 'ItemCode'], // Headers
      ['Sample Product', 'Sample Description', 100, 10, '10%', 'Unit', 'County', 'Type', 'Box', 'Kg', 'Cash', 'ITEM123'], // Example row
    ];

    const worksheet = XLSX.utils.aoa_to_sheet(sampleData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Template');

    XLSX.writeFile(workbook, 'ProductTemplate.xlsx');
    toast.success('Template downloaded successfully!');
  };

  // Handle modal close
  const handleClose = () => {
    setShowModal(false);
    setProductToEdit({
      id: null,
      name: '',
      description: '',
      price: 0,
      quantity: 0,
      tax: '',
      unit: '',
      county: '',
      itemType: '',
      packagingUnit: '',
      quantityUnit: '',
      paymentType: '',
      itemCode: ''
    });
  };

  return (
    <>
      <Header />
      <Container fluid className="p-0" style={{ fontFamily: 'CustomFont' }}>
        <Row noGutters>
          <Col md={2} className="bg-light sidebar p-3">
            <Sidebar />
          </Col>
          <Col md={10} className="p-5 content" style={{ marginTop: 18 }}>
            <h3 style={{ marginTop: 4 }} className="mb-3">All Products</h3>
            <div className="text-end mb-3">
              <Button variant="primary" onClick={() => setShowModal(true)} className="me-2">
                <i className="bi bi-plus-circle"></i> Add Product
              </Button>
              <Button variant="secondary" onClick={handleDownloadTemplate} className="me-2">
                <i className="bi bi-download"></i> Download Template
              </Button>
              <label htmlFor="import-file" className="btn btn-secondary">
                <i className="bi bi-upload"></i> Import
              </label>
              <input
                type="file"
                id="import-file"
                accept=".xlsx, .xls"
                onChange={handleImport}
                style={{ display: 'none' }}
              />
            </div>
            {/* Product Table */}
            {loading ? (
              <Spinner animation="border" />
            ) : (
              <Table striped bordered hover>
                <thead>
                  <tr>
                    <th>#</th>
                    <th>Product Name</th>
                    <th>Item Code</th>
                    <th>Price</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredProducts.map((product, index) => (
                    <tr key={product.id}>
                      <td>{index + 1}</td>
                      <td>{product.name}</td>
                      <td>{product.itemCode}</td>
                      <td>{product.price}</td>
                      <td>
                        <Button variant="warning" onClick={() => setProductToEdit(product)}>Edit</Button>
                        <Button variant="danger" onClick={() => handleDelete(product.id!)}>Delete</Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            )}
          </Col>
        </Row>

        {/* Add/Edit Product Modal */}
        <Modal show={showModal} onHide={handleClose}>
          <Modal.Header closeButton>
            <Modal.Title>{productToEdit.id ? 'Edit Product' : 'Add Product'}</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form>
              <Form.Group controlId="productName">
                <Form.Label>Product Name</Form.Label>
                <Form.Control
                  type="text"
                  name="name"
                  value={productToEdit.name}
                  onChange={(e) => setProductToEdit({ ...productToEdit, name: e.target.value })}
                />
              </Form.Group>
              <Form.Group controlId="productDescription">
                <Form.Label>Description</Form.Label>
                <Form.Control
                  type="text"
                  name="description"
                  value={productToEdit.description}
                  onChange={(e) => setProductToEdit({ ...productToEdit, description: e.target.value })}
                />
              </Form.Group>
              <Form.Group controlId="productPrice">
                <Form.Label>Price</Form.Label>
                <Form.Control
                  type="number"
                  name="price"
                  value={productToEdit.price}
                  onChange={(e) => setProductToEdit({ ...productToEdit, price: parseFloat(e.target.value) })}
                />
              </Form.Group>
            </Form>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={handleClose}>Close</Button>
            <Button variant="primary" onClick={handleSave}>{productToEdit.id ? 'Save Changes' : 'Add Product'}</Button>
          </Modal.Footer>
        </Modal>
        <ToastContainer />
      </Container>
    </>
  );
};

export default AllProduct;